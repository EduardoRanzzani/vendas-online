// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    name      String
    email     String    @unique
    phone     String
    cpf       String    @unique
    password  String
    typeUser  Int       @default(1) @map("type_user")
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    addresses Address[]

    @@map("tb_user")
}

model State {
    id        Int       @id @default(autoincrement())
    name      String
    uf        String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    cities City[]

    @@map("tb_state")
}

model City {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    state     State     @relation(fields: [stateId], references: [id])
    stateId   Int       @map("state_id")
    addresses Address[]

    @@map("tb_city")
}

model Address {
    id            Int       @id @default(autoincrement())
    street        String
    complement    String?
    numberAddress Int       @map("number")
    cep           String
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime? @updatedAt @map("updated_at")

    user   User @relation(fields: [userId], references: [id])
    userId Int  @map("user_id")

    city   City @relation(fields: [cityId], references: [id])
    cityId Int  @map("city_id")

    @@map("tb_address")
}

model Product {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    price     Float
    sale      Boolean  @default(false)

    availibility Availibility
    reviews      Review[]
    tags         Tag[]
    description  Description?

    @@map("tb_product")
}

model Description {
    id      Int    @id @default(autoincrement())
    content String

    product   Product @relation(fields: [productId], references: [id])
    productId Int     @unique @map("product_id")

    @@map("tb_description")
}

model Review {
    id      Int    @id @default(autoincrement())
    title   String
    content String
    rating  Int

    product   Product @relation(fields: [productId], references: [id])
    productId Int     @map("product_id")

    @@map("tb_reviews")
}

model Tag {
    id      Int    @id @default(autoincrement())
    content String @unique

    product Product[]

    @@map("tb_tag")
}

enum Availibility {
    IN_STORE
    ONLINE
}
